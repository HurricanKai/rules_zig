load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@rules_zig//zig:defs.bzl", "zig_binary", "zig_library", "zig_test")

cc_library(
    name = "add",
    srcs = ["add.c"],
    linkstatic = True,
)

zig_binary(
    name = "binary",
    linkdeps = [":add"],
    main = "main.zig",
)

zig_library(
    name = "library",
    linkdeps = [":add"],
    main = "main.zig",
)

zig_test(
    name = "test",
    linkdeps = [":add"],
    main = "main.zig",
)

genrule(
    name = "output",
    outs = ["output.actual"],
    cmd = "$(execpath :binary) > $(OUTS)",
    tools = [":binary"],
)

diff_test(
    name = "output_test",
    size = "small",
    file1 = ":output.expected",
    file2 = ":output.actual",
)

genrule(
    name = "library-symbol",
    srcs = [":library"],
    outs = ["library-symbol.txt"],
    # Test that `add` is not inlined into the Zig library, but remains an
    # undefined symbol to be resolved later.
    cmd = "$(NM) -j --undefined-only $(SRCS) | grep add > $(OUTS)",
    toolchains = ["@bazel_tools//tools/cpp:current_cc_toolchain"],
)

build_test(
    name = "build",
    size = "small",
    targets = [
        ":binary",
        ":library",
        ":library-symbol",
        ":test",
    ],
)
